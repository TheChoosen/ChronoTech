#!/usr/bin/env python3
"""
ANALYSE DES MODULES - UTILISATION MYSQL vs AUTRES
Identification des modules non-MySQL et standardisation
"""

import os
import re
from pathlib import Path

def analyze_db_usage():
    """Analyser l'utilisation des bases de donn√©es dans le projet"""
    
    print("üîç ANALYSE DE L'UTILISATION DES BASES DE DONN√âES")
    print("="*60)
    
    # Modules utilisant MySQL correctement (avec config centralis√©e)
    mysql_correct_modules = [
        "core/database.py",
        "routes/customers/utils.py", 
        "routes/technicians/routes.py",
        "routes/work_orders/routes.py",
        "routes/analytics/routes.py",
        "migrations/apply_department_migration.py"
    ]
    
    # Modules utilisant MySQL avec config incorrecte (localhost, etc.)
    mysql_incorrect_modules = [
        "routes/interventions/api_interventions.py",
        "routes/work_orders/api_tasks.py", 
        "routes/interventions/routes.py",
        "routes/mobile/routes.py",
        "routes/ai/routes.py",
        "routes/time_tracking/routes.py",
        "models/sprint2_models.py",
        "utils.py"
    ]
    
    # Modules utilisant SQLite
    sqlite_modules = [
        "core/offline_sync.py",
        "core/optimized_mysql_sync.py", 
        "core/voice_to_action.py",
        "routes/api/sprint2_api.py"
    ]
    
    # Modules sans DB identifi√©e (potentiellement probl√©matiques)  
    unknown_modules = [
        "routes/dashboard_api.py",
        "routes/api/contextual_chat.py",
        "services/websocket/websocket_server.py"
    ]
    
    print("\n‚úÖ MODULES MYSQL CORRECTEMENT CONFIGUR√âS:")
    for module in mysql_correct_modules:
        print(f"   ‚Ä¢ {module}")
    
    print("\n‚ö†Ô∏è MODULES MYSQL MAL CONFIGUR√âS (localhost/root):")  
    for module in mysql_incorrect_modules:
        print(f"   ‚Ä¢ {module}")
    
    print("\nüóÉÔ∏è MODULES UTILISANT SQLITE:")
    for module in sqlite_modules:
        print(f"   ‚Ä¢ {module}")
        
    print("\n‚ùì MODULES SANS DB CLAIRE:")
    for module in unknown_modules:
        print(f"   ‚Ä¢ {module}")
    
    return {
        'mysql_correct': mysql_correct_modules,
        'mysql_incorrect': mysql_incorrect_modules, 
        'sqlite': sqlite_modules,
        'unknown': unknown_modules
    }

def generate_standardization_plan():
    """G√©n√©rer un plan de standardisation"""
    
    print("\n" + "="*60)
    print("üìã PLAN DE STANDARDISATION MYSQL")  
    print("="*60)
    
    print("\nüéØ OBJECTIFS:")
    print("1. Tous les modules utilisent MySQL 192.168.50.101")
    print("2. Configuration centralis√©e via core/config.py")
    print("3. Fonction get_db_connection() standardis√©e")
    print("4. SQLite conserv√© uniquement pour offline/cache")
    
    print("\nüìù ACTIONS REQUISES:")
    print("\n1. CORRIGER LES CONNEXIONS MYSQL:")
    print("   ‚Ä¢ Remplacer localhost par 192.168.50.101")
    print("   ‚Ä¢ Remplacer root par gsicloud") 
    print("   ‚Ä¢ Utiliser password TCOChoosenOne204$")
    print("   ‚Ä¢ Base de donn√©es: bdm")
    
    print("\n2. STANDARDISER get_db_connection():")
    print("   ‚Ä¢ Importer de core.database ou core.config")
    print("   ‚Ä¢ Supprimer les impl√©mentations locales")
    print("   ‚Ä¢ Utiliser get_db_config() centralis√©")
    
    print("\n3. MODULES SQLITE √Ä CONSERVER:")  
    print("   ‚Ä¢ offline_sync.py - Synchronisation offline")
    print("   ‚Ä¢ voice_to_action.py - Cache vocal local")
    print("   ‚Ä¢ optimized_mysql_sync.py - Sync bidirectionnelle")
    
    print("\n4. DONN√âES DE D√âMONSTRATION:")
    print("   ‚Ä¢ Cr√©er des scripts de seed par module")
    print("   ‚Ä¢ Peupler MySQL avec des donn√©es r√©alistes")
    print("   ‚Ä¢ Tester chaque fonctionnalit√©")

def main():
    """Fonction principale"""
    analysis = analyze_db_usage()
    generate_standardization_plan()
    
    print("\nüöÄ PROCHAINES √âTAPES:")
    print("1. Ex√©cuter le script de standardisation")
    print("2. Cr√©er les donn√©es de d√©monstration") 
    print("3. Tester tous les modules")
    print("4. Valider le fonctionnement complet")

if __name__ == "__main__":
    main()
