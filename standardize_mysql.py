#!/usr/bin/env python3
"""
SCRIPT DE STANDARDISATION MYSQL
Correction de tous les modules pour utiliser la configuration MySQL centralis√©e
"""

import os
import re
from pathlib import Path

def standardize_mysql_connections():
    """Standardiser toutes les connexions MySQL"""
    
    print("üîß STANDARDISATION DES CONNEXIONS MYSQL")
    print("="*50)
    
    # Modules √† corriger avec leurs chemins
    modules_to_fix = {
        "routes/interventions/api_interventions.py": {
            "old_pattern": r"def get_db_connection\(\):\s*\"\"\".*?\"\"\"\s*return pymysql\.connect\(\s*host=os\.getenv\('MYSQL_HOST', 'localhost'\),\s*user=os\.getenv\('MYSQL_USER', 'root'\),\s*password=os\.getenv\('MYSQL_PASSWORD', ''\),\s*database=os\.getenv\('MYSQL_DB', 'chronotech'\),\s*charset='utf8mb4',\s*cursorclass=pymysql\.cursors\.DictCursor\s*\)",
            "replacement": "# Utiliser la connexion centralis√©e\nfrom core.database import get_db_connection"
        },
        "routes/work_orders/api_tasks.py": "same",
        "routes/interventions/routes.py": "same", 
        "routes/mobile/routes.py": "same",
        "routes/ai/routes.py": "same",
        "routes/time_tracking/routes.py": "same",
        "models/sprint2_models.py": "same"
    }
    
    # Template de remplacement standard
    standard_import = "from core.database import get_db_connection"
    
    for module_path in modules_to_fix.keys():
        full_path = f"/home/amenard/Chronotech/ChronoTech/{module_path}"
        
        if os.path.exists(full_path):
            print(f"üîß Correction de {module_path}...")
            
            try:
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                # Sauvegarder l'original
                backup_path = f"{full_path}.backup_mysql_fix"
                with open(backup_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                # Chercher et remplacer la fonction get_db_connection locale
                pattern = r"def get_db_connection\(\):\s*\"\"\".*?\"\"\"\s*return pymysql\.connect\(\s*.*?\s*\)"
                
                if re.search(pattern, content, re.DOTALL):
                    # Remplacer par import centralis√©
                    modified_content = re.sub(pattern, 
                        "# Connexion centralis√©e import√©e de core.database", 
                        content, flags=re.DOTALL)
                    
                    # Ajouter l'import en haut si pas d√©j√† pr√©sent
                    if "from core.database import get_db_connection" not in modified_content:
                        # Trouver la ligne apr√®s les autres imports
                        lines = modified_content.split('\n')
                        import_line_added = False
                        
                        for i, line in enumerate(lines):
                            if line.startswith('from') or line.startswith('import'):
                                continue
                            else:
                                # Ins√©rer l'import juste avant cette ligne
                                lines.insert(i, standard_import)
                                import_line_added = True
                                break
                        
                        if not import_line_added:
                            # Ajouter au d√©but apr√®s les commentaires
                            lines.insert(3, standard_import)
                        
                        modified_content = '\n'.join(lines)
                    
                    # √âcrire le fichier modifi√©
                    with open(full_path, 'w', encoding='utf-8') as f:
                        f.write(modified_content)
                    
                    print(f"   ‚úÖ {module_path} - Corrig√©")
                else:
                    print(f"   ‚ö†Ô∏è {module_path} - Pattern non trouv√©")
                    
            except Exception as e:
                print(f"   ‚ùå {module_path} - Erreur: {e}")
        else:
            print(f"   ‚ùì {module_path} - Fichier introuvable")

def fix_specific_modules():
    """Corrections sp√©cifiques pour certains modules"""
    
    print("\nüéØ CORRECTIONS SP√âCIFIQUES")
    print("="*30)
    
    # Fix utils.py
    utils_path = "/home/amenard/Chronotech/ChronoTech/utils.py"
    if os.path.exists(utils_path):
        print("üîß Correction de utils.py...")
        
        with open(utils_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier si la config est correcte
        if "MYSQL_HOST', 'localhost'" in content:
            # Remplacer les valeurs par d√©faut incorrectes
            content = content.replace("'MYSQL_HOST', 'localhost'", "'MYSQL_HOST', '192.168.50.101'")
            content = content.replace("'MYSQL_USER', 'root'", "'MYSQL_USER', 'gsicloud'") 
            content = content.replace("'MYSQL_PASSWORD', ''", "'MYSQL_PASSWORD', 'TCOChoosenOne204$'")
            content = content.replace("'MYSQL_DATABASE', ''", "'MYSQL_DATABASE', 'bdm'")
            
            with open(utils_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("   ‚úÖ utils.py - Valeurs par d√©faut corrig√©es")
        else:
            print("   ‚úÖ utils.py - D√©j√† correct")
    
    # Fix dashboard_api.py pour utiliser MySQL
    dashboard_api_path = "/home/amenard/Chronotech/ChronoTech/routes/dashboard_api.py"
    if os.path.exists(dashboard_api_path):
        print("üîß Correction de dashboard_api.py...")
        
        with open(dashboard_api_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if "from core.database import get_db_connection" not in content:
            # Ajouter l'import
            lines = content.split('\n')
            lines.insert(2, "from core.database import get_db_connection")
            content = '\n'.join(lines)
            
            with open(dashboard_api_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print("   ‚úÖ dashboard_api.py - Import ajout√©")
        else:
            print("   ‚úÖ dashboard_api.py - D√©j√† correct")

def verify_mysql_config():
    """V√©rifier que la configuration MySQL est correcte"""
    
    print("\nüîç V√âRIFICATION DE LA CONFIGURATION MYSQL")
    print("="*45)
    
    config_path = "/home/amenard/Chronotech/ChronoTech/core/config.py"
    with open(config_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # V√©rifier les param√®tres
    checks = {
        "MYSQL_HOST": "192.168.50.101",
        "MYSQL_USER": "gsicloud", 
        "MYSQL_PASSWORD": "TCOChoosenOne204$",
        "MYSQL_DB": "bdm"
    }
    
    for param, expected in checks.items():
        if f"'{expected}')" in content or f'"{expected}")' in content:
            print(f"   ‚úÖ {param} = {expected}")
        else:
            print(f"   ‚ö†Ô∏è {param} - V√©rifier la valeur")

def main():
    """Fonction principale"""
    
    print("üöÄ D√âMARRAGE DE LA STANDARDISATION MYSQL")
    print("="*50)
    
    # 1. Standardiser les connexions
    standardize_mysql_connections()
    
    # 2. Corrections sp√©cifiques
    fix_specific_modules()
    
    # 3. V√©rifier la config
    verify_mysql_config()
    
    print("\n" + "="*50)
    print("‚úÖ STANDARDISATION TERMIN√âE")
    print("="*50)
    print("\nüìã R√âSUM√â:")
    print("‚Ä¢ Connexions MySQL standardis√©es")
    print("‚Ä¢ Configuration centralis√©e utilis√©e") 
    print("‚Ä¢ Imports corrig√©s")
    print("‚Ä¢ Sauvegardes cr√©√©es (.backup_mysql_fix)")
    
    print("\nüîÑ PROCHAINE √âTAPE:")
    print("Cr√©er les donn√©es de d√©monstration pour chaque module")

if __name__ == "__main__":
    main()
