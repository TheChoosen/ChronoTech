#!/usr/bin/env python3
"""
Configuration Google Drive pour ChronoTech
Solution simple pour configurer ou d√©sactiver Google Drive
"""

import os
import sys

def check_google_drive_status():
    """V√©rifier l'√©tat actuel de Google Drive"""
    print("üîß DIAGNOSTIC GOOGLE DRIVE CHRONOTECH")
    print("=" * 50)
    
    # Variables d'environnement importantes
    use_oauth = os.getenv('GOOGLE_DRIVE_USE_OAUTH', 'false')
    disable_drive = os.getenv('DISABLE_GOOGLE_DRIVE', 'false')
    
    print(f"üìä Configuration actuelle:")
    print(f"   GOOGLE_DRIVE_USE_OAUTH: {use_oauth}")
    print(f"   DISABLE_GOOGLE_DRIVE: {disable_drive}")
    
    # V√©rifier les fichiers de credentials
    files_to_check = [
        'credentials.json',
        'token.pickle',
        '.env'
    ]
    
    print(f"\nüìÅ Fichiers de configuration:")
    for file in files_to_check:
        if os.path.exists(file):
            print(f"   ‚úÖ {file} - Trouv√©")
        else:
            print(f"   ‚ùå {file} - Manquant")
    
    # Analyser l'avertissement
    print(f"\n‚ö†Ô∏è PROBL√àME D√âTECT√â:")
    print(f"   Message: 'No Google Drive credentials available; skipping Drive upload'")
    print(f"   Fichier: routes/openai.py ligne 139")
    print(f"   Cause: Le syst√®me tente d'utiliser Google Drive mais les credentials ne sont pas configur√©s")

def propose_solutions():
    """Proposer des solutions"""
    print(f"\nüîß SOLUTIONS DISPONIBLES:")
    print(f"=" * 30)
    
    print(f"1. üö´ D√âSACTIVER GOOGLE DRIVE (Recommand√© pour la d√©mo)")
    print(f"   - Plus simple et rapide")
    print(f"   - Aucune configuration n√©cessaire")
    print(f"   - Les fichiers seront stock√©s localement")
    
    print(f"\n2. ‚öôÔ∏è CONFIGURER GOOGLE DRIVE (Optionnel)")
    print(f"   - N√©cessite un compte Google Cloud")
    print(f"   - Configuration OAuth2 requise")
    print(f"   - Plus complexe mais fonctionnel")
    
    print(f"\n3. üîá SUPPRIMER LES AVERTISSEMENTS")
    print(f"   - Modifier le code pour ne plus afficher le warning")
    print(f"   - Plus propre pour la d√©mo")

def disable_google_drive():
    """D√©sactiver Google Drive proprement"""
    print(f"\nüö´ D√âSACTIVATION DE GOOGLE DRIVE...")
    
    # Cr√©er/modifier le fichier .env
    env_content = ""
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            env_content = f.read()
    
    # Ajouter la variable de d√©sactivation
    if 'DISABLE_GOOGLE_DRIVE' not in env_content:
        env_content += f"\n# D√©sactiver Google Drive pour la d√©mo\n"
        env_content += f"DISABLE_GOOGLE_DRIVE=true\n"
        env_content += f"GOOGLE_DRIVE_USE_OAUTH=false\n"
        
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print(f"‚úÖ Variable DISABLE_GOOGLE_DRIVE=true ajout√©e √† .env")
    else:
        print(f"‚ÑπÔ∏è DISABLE_GOOGLE_DRIVE d√©j√† configur√© dans .env")
    
    return True

def remove_warnings():
    """Supprimer les avertissements du code"""
    print(f"\nüîá SUPPRESSION DES AVERTISSEMENTS...")
    
    openai_file = 'routes/openai.py'
    if not os.path.exists(openai_file):
        print(f"‚ùå Fichier {openai_file} non trouv√©")
        return False
    
    # Lire le fichier
    with open(openai_file, 'r') as f:
        content = f.read()
    
    # Remplacer le warning par un debug silencieux
    old_warning = "current_app.logger.warning('No Google Drive credentials available; skipping Drive upload')"
    new_debug = "# Google Drive d√©sactiv√© pour la d√©mo - stockage local utilis√©"
    
    if old_warning in content:
        content = content.replace(old_warning, new_debug)
        
        with open(openai_file, 'w') as f:
            f.write(content)
        
        print(f"‚úÖ Avertissement Google Drive supprim√© de {openai_file}")
        return True
    else:
        print(f"‚ÑπÔ∏è Avertissement d√©j√† modifi√© dans {openai_file}")
        return True

def configure_google_drive():
    """Guide pour configurer Google Drive"""
    print(f"\n‚öôÔ∏è CONFIGURATION GOOGLE DRIVE:")
    print(f"=" * 40)
    
    print(f"üìã √âtapes requises:")
    print(f"1. Cr√©er un projet Google Cloud Console")
    print(f"2. Activer l'API Google Drive")
    print(f"3. Cr√©er des credentials OAuth2")
    print(f"4. T√©l√©charger credentials.json")
    print(f"5. Placer credentials.json dans le r√©pertoire ChronoTech")
    print(f"6. Ex√©cuter le processus d'authentification")
    
    print(f"\nüîó Liens utiles:")
    print(f"   Google Cloud Console: https://console.cloud.google.com/")
    print(f"   Documentation API: https://developers.google.com/drive/api/v3/quickstart/python")
    
    print(f"\n‚è±Ô∏è Temps estim√©: 15-30 minutes")
    print(f"üéØ Recommandation: Utiliser la solution 1 (d√©sactivation) pour la d√©mo")

def main():
    """Menu principal"""
    check_google_drive_status()
    propose_solutions()
    
    print(f"\nüéØ CHOISIR UNE SOLUTION:")
    print(f"1 - D√©sactiver Google Drive (Recommand√©)")
    print(f"2 - Supprimer les avertissements")
    print(f"3 - Guide configuration Google Drive")
    print(f"4 - Tout d√©sactiver (Solution compl√®te)")
    print(f"q - Quitter")
    
    choice = input(f"\nVotre choix (1-4 ou q): ").strip().lower()
    
    if choice == '1':
        if disable_google_drive():
            print(f"\n‚úÖ Google Drive d√©sactiv√© avec succ√®s!")
            print(f"üîÑ Red√©marrez le serveur pour appliquer les changements")
    elif choice == '2':
        if remove_warnings():
            print(f"\n‚úÖ Avertissements supprim√©s!")
    elif choice == '3':
        configure_google_drive()
    elif choice == '4':
        if disable_google_drive() and remove_warnings():
            print(f"\n‚úÖ SOLUTION COMPL√àTE APPLIQU√âE!")
            print(f"   - Google Drive d√©sactiv√©")
            print(f"   - Avertissements supprim√©s")
            print(f"   - Fichiers stock√©s localement")
            print(f"üîÑ Red√©marrez le serveur pour une interface propre")
    elif choice == 'q':
        print(f"\nüëã Au revoir!")
    else:
        print(f"\n‚ùå Choix invalide")
    
    print(f"\nüìä R√âSUM√â:")
    print(f"   - Le serveur ChronoTech fonctionnera sans Google Drive")
    print(f"   - Les fichiers seront stock√©s dans static/uploads/")
    print(f"   - Aucune fonctionnalit√© essentielle n'est affect√©e")
    print(f"   - L'interface sera plus propre sans les avertissements")

if __name__ == '__main__':
    main()
